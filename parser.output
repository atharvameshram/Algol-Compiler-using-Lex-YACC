Terminals unused in grammar

   AND
   OR


State 20 conflicts: 8 shift/reduce
State 72 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: body

    2 datatype: INT
    3         | REAL
    4         | CHAR
    5         | BOOL

    6 $@1: /* empty */

    7 $@2: /* empty */

    8 $@3: /* empty */

    9 body: FOR $@1 for_condn DO $@2 body OD $@3

   10 $@4: /* empty */

   11 $@5: /* empty */

   12 $@6: /* empty */

   13 $@7: /* empty */

   14 body: IF $@4 condition $@5 THEN $@6 body $@7 else FI
   15     | statement ';'
   16     | body body

   17 $@8: /* empty */

   18 body: PRINTFF $@8 '(' STR ')' ';'

   19 num_value: NUMBER
   20          | REAL_NUM

   21 $@9: /* empty */

   22 $@10: /* empty */

   23 $@11: /* empty */

   24 $@12: /* empty */

   25 else: ELIF $@9 condition $@10 THEN $@11 body $@12 else

   26 $@13: /* empty */

   27 else: ELSE $@13 body
   28     | /* empty */

   29 $@14: /* empty */

   30 $@15: /* empty */

   31 for_condn: ID FROM $@14 num_value TO $@15 num_value

   32 condition: '(' value relop value ')'
   33          | TRUE
   34          | FALSE
   35          | /* empty */

   36 $@16: /* empty */

   37 statement: datatype ID $@16 init

   38 $@17: /* empty */

   39 statement: ID $@17 ASSIGN expression

   40 $@18: /* empty */

   41 statement: ID $@18 relop expression

   42 init: ASSIGN value
   43     | /* empty */

   44 expression: expression arithmetic expression
   45           | value

   46 arithmetic: ADD
   47           | SUBTRACT
   48           | MULTIPLY
   49           | DIVIDE

   50 relop: LT
   51      | GT
   52      | LE
   53      | GE
   54      | EQ
   55      | NE

   56 value: NUMBER
   57      | REAL_NUM
   58      | CHARACTER
   59      | ID
   60      | TRUE
   61      | FALSE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 18 32
')' (41) 18 32
';' (59) 15 18
error (256)
CHARACTER (258) 58
PRINTFF (259) 18
INT (260) 2
REAL (261) 3
CHAR (262) 4
BOOL (263) 5
FOR (264) 9
FROM (265) 31
TO (266) 31
DO (267) 9
OD (268) 9
IF (269) 14
ELIF (270) 25
ELSE (271) 27
THEN (272) 14 25
FI (273) 14
TRUE (274) 33 60
FALSE (275) 34 61
NUMBER (276) 19 56
REAL_NUM (277) 20 57
ID (278) 31 37 39 41 59
LE (279) 52
GE (280) 53
EQ (281) 54
NE (282) 55
GT (283) 51
LT (284) 50
ASSIGN (285) 39 42
AND (286)
OR (287)
STR (288) 18
ADD (289) 46
MULTIPLY (290) 48
DIVIDE (291) 49
SUBTRACT (292) 47


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 1, on right: 0
datatype (43)
    on left: 2 3 4 5, on right: 37
body (44)
    on left: 9 14 15 16 18, on right: 1 9 14 16 25 27
$@1 (45)
    on left: 6, on right: 9
$@2 (46)
    on left: 7, on right: 9
$@3 (47)
    on left: 8, on right: 9
$@4 (48)
    on left: 10, on right: 14
$@5 (49)
    on left: 11, on right: 14
$@6 (50)
    on left: 12, on right: 14
$@7 (51)
    on left: 13, on right: 14
$@8 (52)
    on left: 17, on right: 18
num_value (53)
    on left: 19 20, on right: 31
else (54)
    on left: 25 27 28, on right: 14 25
$@9 (55)
    on left: 21, on right: 25
$@10 (56)
    on left: 22, on right: 25
$@11 (57)
    on left: 23, on right: 25
$@12 (58)
    on left: 24, on right: 25
$@13 (59)
    on left: 26, on right: 27
for_condn (60)
    on left: 31, on right: 9
$@14 (61)
    on left: 29, on right: 31
$@15 (62)
    on left: 30, on right: 31
condition (63)
    on left: 32 33 34 35, on right: 14 25
statement (64)
    on left: 37 39 41, on right: 15
$@16 (65)
    on left: 36, on right: 37
$@17 (66)
    on left: 38, on right: 39
$@18 (67)
    on left: 40, on right: 41
init (68)
    on left: 42 43, on right: 37
expression (69)
    on left: 44 45, on right: 39 41 44
arithmetic (70)
    on left: 46 47 48 49, on right: 44
relop (71)
    on left: 50 51 52 53 54 55, on right: 32 41
value (72)
    on left: 56 57 58 59 60 61, on right: 32 42 45


state 0

    0 $accept: . program $end

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    program    go to state 9
    datatype   go to state 10
    body       go to state 11
    statement  go to state 12


state 1

   18 body: PRINTFF . $@8 '(' STR ')' ';'

    $default  reduce using rule 17 ($@8)

    $@8  go to state 13


state 2

    2 datatype: INT .

    $default  reduce using rule 2 (datatype)


state 3

    3 datatype: REAL .

    $default  reduce using rule 3 (datatype)


state 4

    4 datatype: CHAR .

    $default  reduce using rule 4 (datatype)


state 5

    5 datatype: BOOL .

    $default  reduce using rule 5 (datatype)


state 6

    9 body: FOR . $@1 for_condn DO $@2 body OD $@3

    $default  reduce using rule 6 ($@1)

    $@1  go to state 14


state 7

   14 body: IF . $@4 condition $@5 THEN $@6 body $@7 else FI

    $default  reduce using rule 10 ($@4)

    $@4  go to state 15


state 8

   39 statement: ID . $@17 ASSIGN expression
   41          | ID . $@18 relop expression

    ASSIGN    reduce using rule 38 ($@17)
    $default  reduce using rule 40 ($@18)

    $@17  go to state 16
    $@18  go to state 17


state 9

    0 $accept: program . $end

    $end  shift, and go to state 18


state 10

   37 statement: datatype . ID $@16 init

    ID  shift, and go to state 19


state 11

    1 program: body .
   16 body: body . body

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    $default  reduce using rule 1 (program)

    datatype   go to state 10
    body       go to state 20
    statement  go to state 12


state 12

   15 body: statement . ';'

    ';'  shift, and go to state 21


state 13

   18 body: PRINTFF $@8 . '(' STR ')' ';'

    '('  shift, and go to state 22


state 14

    9 body: FOR $@1 . for_condn DO $@2 body OD $@3

    ID  shift, and go to state 23

    for_condn  go to state 24


state 15

   14 body: IF $@4 . condition $@5 THEN $@6 body $@7 else FI

    TRUE   shift, and go to state 25
    FALSE  shift, and go to state 26
    '('    shift, and go to state 27

    $default  reduce using rule 35 (condition)

    condition  go to state 28


state 16

   39 statement: ID $@17 . ASSIGN expression

    ASSIGN  shift, and go to state 29


state 17

   41 statement: ID $@18 . relop expression

    LE  shift, and go to state 30
    GE  shift, and go to state 31
    EQ  shift, and go to state 32
    NE  shift, and go to state 33
    GT  shift, and go to state 34
    LT  shift, and go to state 35

    relop  go to state 36


state 18

    0 $accept: program $end .

    $default  accept


state 19

   37 statement: datatype ID . $@16 init

    $default  reduce using rule 36 ($@16)

    $@16  go to state 37


state 20

   16 body: body . body
   16     | body body .

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    PRINTFF   [reduce using rule 16 (body)]
    INT       [reduce using rule 16 (body)]
    REAL      [reduce using rule 16 (body)]
    CHAR      [reduce using rule 16 (body)]
    BOOL      [reduce using rule 16 (body)]
    FOR       [reduce using rule 16 (body)]
    IF        [reduce using rule 16 (body)]
    ID        [reduce using rule 16 (body)]
    $default  reduce using rule 16 (body)

    datatype   go to state 10
    body       go to state 20
    statement  go to state 12


state 21

   15 body: statement ';' .

    $default  reduce using rule 15 (body)


state 22

   18 body: PRINTFF $@8 '(' . STR ')' ';'

    STR  shift, and go to state 38


state 23

   31 for_condn: ID . FROM $@14 num_value TO $@15 num_value

    FROM  shift, and go to state 39


state 24

    9 body: FOR $@1 for_condn . DO $@2 body OD $@3

    DO  shift, and go to state 40


state 25

   33 condition: TRUE .

    $default  reduce using rule 33 (condition)


state 26

   34 condition: FALSE .

    $default  reduce using rule 34 (condition)


state 27

   32 condition: '(' . value relop value ')'

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 47


state 28

   14 body: IF $@4 condition . $@5 THEN $@6 body $@7 else FI

    $default  reduce using rule 11 ($@5)

    $@5  go to state 48


state 29

   39 statement: ID $@17 ASSIGN . expression

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    expression  go to state 49
    value       go to state 50


state 30

   52 relop: LE .

    $default  reduce using rule 52 (relop)


state 31

   53 relop: GE .

    $default  reduce using rule 53 (relop)


state 32

   54 relop: EQ .

    $default  reduce using rule 54 (relop)


state 33

   55 relop: NE .

    $default  reduce using rule 55 (relop)


state 34

   51 relop: GT .

    $default  reduce using rule 51 (relop)


state 35

   50 relop: LT .

    $default  reduce using rule 50 (relop)


state 36

   41 statement: ID $@18 relop . expression

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    expression  go to state 51
    value       go to state 50


state 37

   37 statement: datatype ID $@16 . init

    ASSIGN  shift, and go to state 52

    $default  reduce using rule 43 (init)

    init  go to state 53


state 38

   18 body: PRINTFF $@8 '(' STR . ')' ';'

    ')'  shift, and go to state 54


state 39

   31 for_condn: ID FROM . $@14 num_value TO $@15 num_value

    $default  reduce using rule 29 ($@14)

    $@14  go to state 55


state 40

    9 body: FOR $@1 for_condn DO . $@2 body OD $@3

    $default  reduce using rule 7 ($@2)

    $@2  go to state 56


state 41

   58 value: CHARACTER .

    $default  reduce using rule 58 (value)


state 42

   60 value: TRUE .

    $default  reduce using rule 60 (value)


state 43

   61 value: FALSE .

    $default  reduce using rule 61 (value)


state 44

   56 value: NUMBER .

    $default  reduce using rule 56 (value)


state 45

   57 value: REAL_NUM .

    $default  reduce using rule 57 (value)


state 46

   59 value: ID .

    $default  reduce using rule 59 (value)


state 47

   32 condition: '(' value . relop value ')'

    LE  shift, and go to state 30
    GE  shift, and go to state 31
    EQ  shift, and go to state 32
    NE  shift, and go to state 33
    GT  shift, and go to state 34
    LT  shift, and go to state 35

    relop  go to state 57


state 48

   14 body: IF $@4 condition $@5 . THEN $@6 body $@7 else FI

    THEN  shift, and go to state 58


state 49

   39 statement: ID $@17 ASSIGN expression .
   44 expression: expression . arithmetic expression

    ADD       shift, and go to state 59
    MULTIPLY  shift, and go to state 60
    DIVIDE    shift, and go to state 61
    SUBTRACT  shift, and go to state 62

    $default  reduce using rule 39 (statement)

    arithmetic  go to state 63


state 50

   45 expression: value .

    $default  reduce using rule 45 (expression)


state 51

   41 statement: ID $@18 relop expression .
   44 expression: expression . arithmetic expression

    ADD       shift, and go to state 59
    MULTIPLY  shift, and go to state 60
    DIVIDE    shift, and go to state 61
    SUBTRACT  shift, and go to state 62

    $default  reduce using rule 41 (statement)

    arithmetic  go to state 63


state 52

   42 init: ASSIGN . value

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 64


state 53

   37 statement: datatype ID $@16 init .

    $default  reduce using rule 37 (statement)


state 54

   18 body: PRINTFF $@8 '(' STR ')' . ';'

    ';'  shift, and go to state 65


state 55

   31 for_condn: ID FROM $@14 . num_value TO $@15 num_value

    NUMBER    shift, and go to state 66
    REAL_NUM  shift, and go to state 67

    num_value  go to state 68


state 56

    9 body: FOR $@1 for_condn DO $@2 . body OD $@3

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    datatype   go to state 10
    body       go to state 69
    statement  go to state 12


state 57

   32 condition: '(' value relop . value ')'

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    value  go to state 70


state 58

   14 body: IF $@4 condition $@5 THEN . $@6 body $@7 else FI

    $default  reduce using rule 12 ($@6)

    $@6  go to state 71


state 59

   46 arithmetic: ADD .

    $default  reduce using rule 46 (arithmetic)


state 60

   48 arithmetic: MULTIPLY .

    $default  reduce using rule 48 (arithmetic)


state 61

   49 arithmetic: DIVIDE .

    $default  reduce using rule 49 (arithmetic)


state 62

   47 arithmetic: SUBTRACT .

    $default  reduce using rule 47 (arithmetic)


state 63

   44 expression: expression arithmetic . expression

    CHARACTER  shift, and go to state 41
    TRUE       shift, and go to state 42
    FALSE      shift, and go to state 43
    NUMBER     shift, and go to state 44
    REAL_NUM   shift, and go to state 45
    ID         shift, and go to state 46

    expression  go to state 72
    value       go to state 50


state 64

   42 init: ASSIGN value .

    $default  reduce using rule 42 (init)


state 65

   18 body: PRINTFF $@8 '(' STR ')' ';' .

    $default  reduce using rule 18 (body)


state 66

   19 num_value: NUMBER .

    $default  reduce using rule 19 (num_value)


state 67

   20 num_value: REAL_NUM .

    $default  reduce using rule 20 (num_value)


state 68

   31 for_condn: ID FROM $@14 num_value . TO $@15 num_value

    TO  shift, and go to state 73


state 69

    9 body: FOR $@1 for_condn DO $@2 body . OD $@3
   16     | body . body

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    OD       shift, and go to state 74
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    datatype   go to state 10
    body       go to state 20
    statement  go to state 12


state 70

   32 condition: '(' value relop value . ')'

    ')'  shift, and go to state 75


state 71

   14 body: IF $@4 condition $@5 THEN $@6 . body $@7 else FI

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    datatype   go to state 10
    body       go to state 76
    statement  go to state 12


state 72

   44 expression: expression . arithmetic expression
   44           | expression arithmetic expression .

    ADD       shift, and go to state 59
    MULTIPLY  shift, and go to state 60
    DIVIDE    shift, and go to state 61
    SUBTRACT  shift, and go to state 62

    ADD       [reduce using rule 44 (expression)]
    MULTIPLY  [reduce using rule 44 (expression)]
    DIVIDE    [reduce using rule 44 (expression)]
    SUBTRACT  [reduce using rule 44 (expression)]
    $default  reduce using rule 44 (expression)

    arithmetic  go to state 63


state 73

   31 for_condn: ID FROM $@14 num_value TO . $@15 num_value

    $default  reduce using rule 30 ($@15)

    $@15  go to state 77


state 74

    9 body: FOR $@1 for_condn DO $@2 body OD . $@3

    $default  reduce using rule 8 ($@3)

    $@3  go to state 78


state 75

   32 condition: '(' value relop value ')' .

    $default  reduce using rule 32 (condition)


state 76

   14 body: IF $@4 condition $@5 THEN $@6 body . $@7 else FI
   16     | body . body

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    $default  reduce using rule 13 ($@7)

    datatype   go to state 10
    body       go to state 20
    $@7        go to state 79
    statement  go to state 12


state 77

   31 for_condn: ID FROM $@14 num_value TO $@15 . num_value

    NUMBER    shift, and go to state 66
    REAL_NUM  shift, and go to state 67

    num_value  go to state 80


state 78

    9 body: FOR $@1 for_condn DO $@2 body OD $@3 .

    $default  reduce using rule 9 (body)


state 79

   14 body: IF $@4 condition $@5 THEN $@6 body $@7 . else FI

    ELIF  shift, and go to state 81
    ELSE  shift, and go to state 82

    $default  reduce using rule 28 (else)

    else  go to state 83


state 80

   31 for_condn: ID FROM $@14 num_value TO $@15 num_value .

    $default  reduce using rule 31 (for_condn)


state 81

   25 else: ELIF . $@9 condition $@10 THEN $@11 body $@12 else

    $default  reduce using rule 21 ($@9)

    $@9  go to state 84


state 82

   27 else: ELSE . $@13 body

    $default  reduce using rule 26 ($@13)

    $@13  go to state 85


state 83

   14 body: IF $@4 condition $@5 THEN $@6 body $@7 else . FI

    FI  shift, and go to state 86


state 84

   25 else: ELIF $@9 . condition $@10 THEN $@11 body $@12 else

    TRUE   shift, and go to state 25
    FALSE  shift, and go to state 26
    '('    shift, and go to state 27

    $default  reduce using rule 35 (condition)

    condition  go to state 87


state 85

   27 else: ELSE $@13 . body

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    datatype   go to state 10
    body       go to state 88
    statement  go to state 12


state 86

   14 body: IF $@4 condition $@5 THEN $@6 body $@7 else FI .

    $default  reduce using rule 14 (body)


state 87

   25 else: ELIF $@9 condition . $@10 THEN $@11 body $@12 else

    $default  reduce using rule 22 ($@10)

    $@10  go to state 89


state 88

   16 body: body . body
   27 else: ELSE $@13 body .

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    $default  reduce using rule 27 (else)

    datatype   go to state 10
    body       go to state 20
    statement  go to state 12


state 89

   25 else: ELIF $@9 condition $@10 . THEN $@11 body $@12 else

    THEN  shift, and go to state 90


state 90

   25 else: ELIF $@9 condition $@10 THEN . $@11 body $@12 else

    $default  reduce using rule 23 ($@11)

    $@11  go to state 91


state 91

   25 else: ELIF $@9 condition $@10 THEN $@11 . body $@12 else

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    datatype   go to state 10
    body       go to state 92
    statement  go to state 12


state 92

   16 body: body . body
   25 else: ELIF $@9 condition $@10 THEN $@11 body . $@12 else

    PRINTFF  shift, and go to state 1
    INT      shift, and go to state 2
    REAL     shift, and go to state 3
    CHAR     shift, and go to state 4
    BOOL     shift, and go to state 5
    FOR      shift, and go to state 6
    IF       shift, and go to state 7
    ID       shift, and go to state 8

    $default  reduce using rule 24 ($@12)

    datatype   go to state 10
    body       go to state 20
    $@12       go to state 93
    statement  go to state 12


state 93

   25 else: ELIF $@9 condition $@10 THEN $@11 body $@12 . else

    ELIF  shift, and go to state 81
    ELSE  shift, and go to state 82

    $default  reduce using rule 28 (else)

    else  go to state 94


state 94

   25 else: ELIF $@9 condition $@10 THEN $@11 body $@12 else .

    $default  reduce using rule 25 (else)
